{"version":3,"sources":["component/ConventorPage/conventerPage.tsx"],"names":["ConvertorPage","useState","classesActive","setClassesActive","classesPasive","setClassesPasive","inputValueResultActive","setInputValueResultActive","inputValueResultPasive","setInputValueResultPasive","currentValutes","useSelector","state","valutesReducer","isSelectValuteActive","isSelectValutePasive","dispatch","useDispatch","selectValutes","item","selectName","onSelectValutes","classesMode","itemOfConditionActive","itemOfConditionPasive","setClasses","selectValutesOne","selectValutesTwo","index","indexOf","splice","toggleMenu","classesModeOne","classesModeTwo","includes","signOfValutesActive","map","className","onClick","ccy","Actions","selectCurrentValutes","selectViseValutes","key","signOfValutesPasive","inputValueChange","inputText","inputNumber","useEffect","String","Number","sale","toFixed","to","variant","color","type","inputProps","min","value","onChange","e","currentTarget","placeholder","join"],"mappings":"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","file":"static/js/5.7c673f83.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport './conventerPage.sass'\r\nimport '././../common/button/button.sass'\r\nimport { AppStateType } from '../../stateManager/redux-store'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Actions, ActionsType } from '../../stateManager/valutes-reducer'\r\nimport { getValutesAPIType } from '../../api/api'\r\nimport { TextField } from '@material-ui/core'\r\nimport { Button } from '@material-ui/core'\r\nconst ConvertorPage: React.FC = () => {\r\n\r\n    /* ===UseState=== */\r\n    let [classesActive, setClassesActive] = useState<string[]>(['valute-list_wrapper'])\r\n    let [classesPasive, setClassesPasive] = useState<string[]>(['valute-list_wrapper'])\r\n    let [inputValueResultActive, setInputValueResultActive] = useState<string>('0')\r\n    let [inputValueResultPasive, setInputValueResultPasive] = useState<string>('0')\r\n\r\n    /* ===UseSelector=== */\r\n    const currentValutes = useSelector((state: AppStateType) => state.valutesReducer.currentValutes)\r\n    let isSelectValuteActive = useSelector((state: AppStateType) => state.valutesReducer.isSelectValuteActive)\r\n    let isSelectValutePasive = useSelector((state: AppStateType) => state.valutesReducer.isSelectValutePasive)\r\n\r\n    /* ===UseDispatch=== */\r\n    const dispatch = useDispatch()\r\n\r\n    if (currentValutes) {\r\n        if (!isSelectValuteActive) isSelectValuteActive = currentValutes[0]\r\n        if (!isSelectValutePasive) isSelectValutePasive = currentValutes[1]\r\n    }\r\n\r\n    const selectValutes = (item: getValutesAPIType | null, selectName: (item: getValutesAPIType | null) => ActionsType) => {\r\n        return dispatch(selectName(item))\r\n    }\r\n\r\n    const onSelectValutes = (classesMode: string[], itemOfConditionActive: getValutesAPIType | null, itemOfConditionPasive: getValutesAPIType | null, setClasses: (value: React.SetStateAction<string[]>) => void, selectValutesOne: (item: getValutesAPIType | null) => ActionsType, selectValutesTwo: (item: getValutesAPIType | null) => ActionsType) => {\r\n        return () => {\r\n            selectValutes(itemOfConditionActive, selectValutesOne)\r\n            selectValutes(itemOfConditionPasive, selectValutesTwo)\r\n            setClasses(() => {\r\n                let index = classesMode.indexOf('open')\r\n                return index > -1 ? classesMode.splice(index - 1, 1) : classesMode\r\n            })\r\n        }\r\n    }\r\n\r\n    const toggleMenu = (classesModeOne: string[], classesModeTwo: string[], setClasses: (value: React.SetStateAction<string[]>) => void) => {\r\n        classesModeOne.includes('open') && classesModeOne.splice(1, 1)\r\n        setClasses(() => {\r\n            let index = classesModeTwo.indexOf('open')\r\n            return index > -1 ? classesModeTwo.splice(index - 1, 1) : [...classesModeTwo, 'open']\r\n        })\r\n    }\r\n\r\n    const signOfValutesActive = currentValutes?.map(item => {\r\n        return <li className=\"list-item\" onClick={onSelectValutes(classesActive, item?.ccy === isSelectValutePasive?.ccy ? isSelectValutePasive : item, item?.ccy === isSelectValutePasive?.ccy ? isSelectValuteActive : isSelectValutePasive, setClassesActive, Actions.selectCurrentValutes, Actions.selectViseValutes)} key={item.ccy}>{item.ccy}</li>\r\n    })\r\n\r\n    const signOfValutesPasive = currentValutes?.map(item => {\r\n        return <li className=\"list-item\" onClick={onSelectValutes(classesPasive, item?.ccy === isSelectValuteActive?.ccy ? isSelectValutePasive : isSelectValuteActive, item?.ccy === isSelectValuteActive?.ccy ? isSelectValuteActive : item, setClassesPasive, Actions.selectCurrentValutes, Actions.selectViseValutes)} key={item.ccy}>{item.ccy}</li>\r\n    })\r\n\r\n    const inputValueChange = (inputText: string, inputNumber: string) => {\r\n        setInputValueResultActive(inputText)\r\n        setInputValueResultPasive(inputNumber)\r\n    }\r\n    useEffect(() => {\r\n        setInputValueResultPasive(String((Number(isSelectValuteActive?.sale) / Number(isSelectValutePasive?.sale) * Number(inputValueResultActive)).toFixed(2)))\r\n    }, [isSelectValutePasive?.ccy, isSelectValuteActive?.ccy])\r\n\r\n\r\n\r\n    if (!currentValutes) return <div>Loading...</div>\r\n\r\n    return (\r\n\r\n        <div className=\"conventerValutesPage\">\r\n            <NavLink to=\"/currentCurses\">\r\n                <Button variant=\"outlined\" color=\"secondary\">\r\n                    Current Valutes\r\n                </Button>\r\n            </NavLink>\r\n            <div className=\"conventer-form\">\r\n                <div className=\"currentValue-valute\">\r\n                    <span>1 {isSelectValuteActive?.ccy} = {((Number(isSelectValuteActive?.sale) / Number(isSelectValutePasive?.sale)).toFixed(2))} {isSelectValutePasive?.ccy}</span>\r\n                </div>\r\n                <div className=\"conventer-form_wrapper\">\r\n                    <div className=\"form-col form-col_active\">\r\n                        <div className=\"active-valute_number\">\r\n                            <TextField type=\"number\" inputProps={{ min: \"0\" }} value={inputValueResultActive} onChange={\r\n                                (e: React.ChangeEvent<HTMLInputElement>) => {\r\n                                    return inputValueChange(e.currentTarget.value, String((Number(isSelectValuteActive?.sale) / Number(isSelectValutePasive?.sale) * Number(e.currentTarget.value)).toFixed(2)))\r\n                                }\r\n                            } placeholder=\"valute\" color=\"secondary\" />\r\n                        </div>\r\n                        <div className=\"active-valute_sign\">\r\n                            <ul className=\"valute-list\">\r\n                                <span onClick={() => toggleMenu(classesPasive, classesActive, setClassesActive)}>{isSelectValuteActive?.ccy}</span>\r\n                                <div className={classesActive.join(' ')}>{signOfValutesActive}</div>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-col form-col_pasive\">\r\n                        <div className=\"pasive-valute_number\">\r\n                            <TextField type=\"number\" inputProps={{ min: \"0\" }} value={inputValueResultPasive} onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                                return inputValueChange(String((Number(isSelectValutePasive?.sale) / Number(isSelectValuteActive?.sale) * Number(e.currentTarget.value)).toFixed(2)), e.currentTarget.value)\r\n                            }} color=\"secondary\" placeholder=\"valute\" />\r\n                        </div>\r\n                        <div className=\"pasive-valute_sign\">\r\n                            <ul className=\"valute-list\">\r\n                                <span onClick={() => toggleMenu(classesActive, classesPasive, setClassesPasive)}>{isSelectValutePasive?.ccy}</span>\r\n                                <div className={classesPasive.join(' ')}>{signOfValutesPasive}</div>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConvertorPage"],"sourceRoot":""}