{"version":3,"sources":["api/api.ts","stateManager/valutes-reducer.ts","component/common/Preloader/preloader.tsx","App.tsx","serviceWorker.ts","stateManager/redux-store.ts","index.tsx"],"names":["ValutesAPI","fetch","then","response","json","initialState","currentValutes","isSelectValuteActive","isSelectValutePasive","inputValue","ValutesReducer","state","action","type","item","inputText","Actions","getCurrentValutes","selectCurrentValutes","selectViseValutes","inputValute","getValutes","dispatch","a","data","window","_state_","Preloader","className","CurrentCurses","React","lazy","ConvertorPage","App","useDispatch","useCallback","useEffect","fallback","path","exact","render","Boolean","location","hostname","match","rootReducer","combineReducers","valutesReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iPASaA,EACG,WACR,OAAOC,MAAM,oEAAoEC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WCF/GC,EAAe,CACfC,eAAgB,KAChBC,qBAAsB,KACtBC,qBAAsB,KACtBC,WAAY,IAOHC,EAAiB,WAAkE,IAAjEC,EAAgE,uDAAxDN,EAAcO,EAA0C,uCAC3F,OAAQA,EAAOC,MACX,IAjBmB,oBAkBf,OAAO,2BACAF,GADP,IAEIL,eAAgBM,EAAON,iBAE/B,IArBuB,yBAsBnB,OAAO,2BACAK,GADP,IAEIJ,qBAAsBK,EAAOE,OAErC,IAzBoB,sBA0BhB,OAAO,2BACAH,GADP,IAEIH,qBAAsBI,EAAOE,OAErC,IA7Ba,eA8BT,OAAO,2BACAH,GADP,IAEIF,WAAYG,EAAOG,YAE3B,QAAS,OAAOJ,IAMXK,EAAU,CACnBC,kBAAmB,SAACX,GAAD,MAA0C,CACzDO,KA7CmB,oBA8CnBP,mBAGJY,qBAAsB,SAACJ,GAAD,MAAqC,CACvDD,KAjDuB,yBAkDvBC,SAGJK,kBAAmB,SAACL,GAAD,MAAqC,CACpDD,KArDoB,sBAsDpBC,SAEJM,YAAa,SAACL,GAAD,MAAwB,CACjCF,KAxDa,eAyDbE,eAQKM,EAAa,WACtB,8CAAO,WAAOC,GAAP,eAAAC,EAAA,sEACcvB,IADd,OACCwB,EADD,OAEHF,EAASN,EAAQC,kBAAkBO,IAFhC,2CAAP,uDAQJC,OAAOC,QAAUL,G,yLC/EJM,G,MAAY,WAErB,OACI,yBAAKC,UAAU,iBACX,yBAAKA,UAAU,eACX,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,kCCZVC,EAAgBC,IAAMC,MAAK,kBAAM,uDACjCC,EAAgBF,IAAMC,MAAK,kBAAM,8DAG1BE,EAAgB,WAG3B,IAAMX,EAAWY,cAEXjB,EAAoBkB,uBAAY,WACpCb,EAASD,iBACR,CAACC,IAMJ,OAJAc,qBAAU,WACRnB,MACC,IAGD,kBAAC,WAAD,CAAUoB,SAAU,kBAAC,EAAD,OAClB,yBAAKT,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOU,KAAK,IAAIC,OAAK,EAACC,OAAQ,kBAAM,kBAACR,EAAD,SACpC,kBAAC,IAAD,CAAOM,KAAK,iBAAiBE,OAAQ,kBAAM,kBAACX,EAAD,aCjBjCY,QACW,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2D,mBCdFC,EAAcC,YAAgB,CAC9BC,eAAgBrC,MAYPsC,EAAQC,YAAYJ,EAAaK,YAAgBC,M,QCT9DC,IAASZ,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUQ,MAAOA,GACf,kBAAC,EAAD,QAGJK,SAASC,eAAe,SF6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvD,MAAK,SAAAwD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.09c77b4c.chunk.js","sourcesContent":["\r\nexport type getValutesAPIType = {\r\n    base_ccy?: string\r\n    buy: string\r\n    ccy: string\r\n    sale: string\r\n}\r\n\r\ntype ValutesType = Array<getValutesAPIType>\r\nexport const ValutesAPI = {\r\n    getValutes: (): Promise<ValutesType> => {\r\n        return fetch('https://api.privatbank.ua/p24api/pubinfo?json&exchange&coursid=5').then(response => response.json())\r\n    }\r\n}\r\n\r\n    \r\n","import { getValutesAPIType } from './../api/api';\r\nimport { AppStateType, InferActionsType } from './redux-store';\r\nimport { ValutesAPI } from \"../api/api\"\r\nimport { ThunkAction } from 'redux-thunk';\r\n\r\nconst GET_CURRENT_VALUES = \"GET_CURRENT_VALUE\"\r\nconst SELECT_CURRENT_VALUTES = \"SELECT_CURRENT_VALUTES\"\r\nconst SELECT_VISE_VALUTES = \"SELECT_VISE_VALUTES\"\r\nconst INPUT_VALUTE = \"INPUT_VALUTE\"\r\nlet initialState = {\r\n    currentValutes: null as getValutesAPIType[] | null,\r\n    isSelectValuteActive: null as getValutesAPIType | null,\r\n    isSelectValutePasive: null as getValutesAPIType | null,\r\n    inputValue: '',\r\n    // resultValute:  \r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\nexport type ActionsType = InferActionsType<typeof Actions>\r\n\r\nexport const ValutesReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case GET_CURRENT_VALUES:\r\n            return {\r\n                ...state,\r\n                currentValutes: action.currentValutes\r\n            }\r\n        case SELECT_CURRENT_VALUTES:\r\n            return {\r\n                ...state,\r\n                isSelectValuteActive: action.item\r\n            }\r\n        case SELECT_VISE_VALUTES:\r\n            return {\r\n                ...state,\r\n                isSelectValutePasive: action.item\r\n            }\r\n        case INPUT_VALUTE: \r\n            return {\r\n                ...state,\r\n                inputValue: action.inputText\r\n            }\r\n        default: return state\r\n    }\r\n}\r\n\r\n/* ===ActionsCreate=== */\r\n\r\nexport const Actions = {\r\n    getCurrentValutes: (currentValutes: getValutesAPIType[]) => ({\r\n        type: GET_CURRENT_VALUES,\r\n        currentValutes\r\n    } as const),\r\n\r\n    selectCurrentValutes: (item: getValutesAPIType | null) => ({\r\n        type: SELECT_CURRENT_VALUTES,\r\n        item\r\n    } as const),\r\n\r\n    selectViseValutes: (item: getValutesAPIType | null) => ({\r\n        type: SELECT_VISE_VALUTES,\r\n        item\r\n    } as const),\r\n    inputValute: (inputText: string) => ({\r\n        type: INPUT_VALUTE,\r\n        inputText\r\n    } as const)\r\n}\r\n\r\n/* ===Thunks=== */\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\n\r\nexport const getValutes = (): ThunkType => {\r\n    return async (dispatch: any) => {\r\n        let data = await ValutesAPI.getValutes()\r\n        dispatch(Actions.getCurrentValutes(data))\r\n    }\r\n}\r\n\r\n\r\n//@ts-ignore\r\nwindow._state_ = getValutes","import React from 'react'\r\nimport './preloader.sass'\r\n\r\nexport const Preloader = () => {\r\n\r\n    return (\r\n        <div className=\"loader-layout\">\r\n            <div className=\"lds-spinner\">\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useCallback, Suspense } from 'react';\r\nimport './App.sass';\r\nimport { useDispatch } from 'react-redux';\r\nimport { getValutes } from './stateManager/valutes-reducer';\r\nimport { Switch, Route } from 'react-router';\r\nimport { Preloader } from './component/common/Preloader/preloader';\r\n\r\nconst CurrentCurses = React.lazy(() => import(\"./component/CurrentCurses/currentCurses\"))\r\nconst ConvertorPage = React.lazy(() => import(\"./component/ConventorPage/conventerPage\"))\r\n\r\n\r\nexport const App: React.FC = () => {\r\n\r\n  /* ===UseDispatcj=== */\r\n  const dispatch = useDispatch()\r\n\r\n  const getCurrentValutes = useCallback(() => {\r\n    dispatch(getValutes())\r\n  }, [dispatch])\r\n\r\n  useEffect(() => {\r\n    getCurrentValutes()\r\n  }, [])\r\n\r\n  return (\r\n    <Suspense fallback={<Preloader />}>\r\n      <div className=\"container\">\r\n        <Switch>\r\n          <Route path=\"/\" exact render={() => <ConvertorPage />} />\r\n          <Route path=\"/currentCurses\" render={() => <CurrentCurses />} />\r\n        </Switch>\r\n      </div>\r\n    </Suspense >\r\n  );\r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { ValutesReducer } from './valutes-reducer';\r\nimport { combineReducers, createStore, applyMiddleware } from 'redux'\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nlet rootReducer = combineReducers({\r\n    valutesReducer: ValutesReducer\r\n})\r\n\r\n\r\ntype RootReducerType = typeof rootReducer\r\n\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\ntype PropertiesType<T> = T extends  { [key: string]: infer U } ? U : never\r\n\r\nexport type InferActionsType<T extends { [key: string]: (...args: any[]) => any}> = ReturnType<PropertiesType<T>>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createContext } from 'vm';\r\nimport { store } from './stateManager/redux-store';\r\nimport { Provider } from 'react-redux'\r\nimport {BrowserRouter, HashRouter} from 'react-router-dom'\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </HashRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}