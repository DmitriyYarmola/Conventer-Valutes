{"version":3,"sources":["api/api.ts","stateManager/valutes-reducer.ts","component/common/Preloader/preloader.tsx","App.tsx","serviceWorker.ts","stateManager/redux-store.ts","index.tsx"],"names":["ValutesAPI","fetch","then","response","json","initialState","currentValutes","isSelectValuteActive","isSelectValutePasive","inputValue","ValutesReducer","state","action","type","item","inputText","selectCurrentValutes","selectViseValutes","getValutes","dispatch","a","data","window","_state_","Preloader","className","CurrentCurses","React","lazy","ConvertorPage","App","useDispatch","getCurrentValutes","useCallback","useEffect","fallback","path","exact","render","Boolean","location","hostname","match","rootReducer","combineReducers","valutesReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mRASaA,EACG,WACR,OAAOC,MAAM,oEAAoEC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WCF/GC,EAAe,CACfC,eAAgB,KAChBC,qBAAsB,KACtBC,qBAAsB,KACtBC,WAAY,IAOHC,EAAiB,WAAkE,IAAjEC,EAAgE,uDAAxDN,EAAcO,EAA0C,uCAC3F,OAAQA,EAAOC,MACX,IAjBmB,oBAkBf,OAAO,2BACAF,GADP,IAEIL,eAAgBM,EAAON,iBAE/B,IArBuB,yBAsBnB,OAAO,2BACAK,GADP,IAEIJ,qBAAsBK,EAAOE,OAErC,IAzBoB,sBA0BhB,OAAO,2BACAH,GADP,IAEIH,qBAAsBI,EAAOE,OAErC,IA7Ba,eA8BT,OAAO,2BACAH,GADP,IAEIF,WAAYG,EAAOG,YAE3B,QAAS,OAAOJ,IAsBXK,EAAuB,SAACF,GAAD,MAA+D,CAC/FD,KA3D2B,yBA4D3BC,SAQSG,EAAoB,SAACH,GAAD,MAA4D,CACzFD,KApEwB,sBAqExBC,SAiBSI,EAAa,WACtB,8CAAO,WAAOC,GAAP,eAAAC,EAAA,sEACcpB,IADd,OACCqB,EADD,OAEHF,EA1CmF,CACvFN,KAlDuB,oBAmDvBP,eAwC+Be,IAFxB,2CAAP,uDAQJC,OAAOC,QAAUL,G,yLCnGJM,G,MAAY,WAErB,OACI,yBAAKC,UAAU,iBACX,yBAAKA,UAAU,eACX,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,kCCZVC,EAAgBC,IAAMC,MAAK,kBAAM,uDACjCC,EAAgBF,IAAMC,MAAK,kBAAM,8DAG1BE,EAAgB,WAG3B,IAAMX,EAAWY,cAEXC,EAAoBC,uBAAY,WACpCd,EAASD,iBACR,CAACC,IAMJ,OAJAe,qBAAU,WACRF,MACC,IAGD,kBAAC,WAAD,CAAUG,SAAU,kBAAC,EAAD,OAClB,yBAAKV,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOW,KAAK,IAAIC,OAAK,EAACC,OAAQ,kBAAM,kBAACT,EAAD,SACpC,kBAAC,IAAD,CAAOO,KAAK,iBAAiBE,OAAQ,kBAAM,kBAACZ,EAAD,aCjBjCa,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2D,mBCdFC,EAAcC,YAAgB,CAC9BC,eAAgBnC,MAQPoC,EAAQC,YAAYJ,EAAaK,YAAgBC,M,QCL9DC,IAASZ,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUQ,MAAOA,GACf,kBAAC,EAAD,QAGJK,SAASC,eAAe,SF6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrD,MAAK,SAAAsD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f3a2d6e0.chunk.js","sourcesContent":["\r\nexport type getValutesAPIType = {\r\n    base_ccy?: string\r\n    buy: string\r\n    ccy: string\r\n    sale: string\r\n}\r\n\r\ntype ValutesType = Array<getValutesAPIType>\r\nexport const ValutesAPI = {\r\n    getValutes: (): Promise<ValutesType> => {\r\n        return fetch('https://api.privatbank.ua/p24api/pubinfo?json&exchange&coursid=5').then(response => response.json())\r\n    }\r\n}\r\n\r\n    \r\n","import { getValutesAPIType } from './../api/api';\r\nimport { AppStateType } from './redux-store';\r\nimport { ValutesAPI } from \"../api/api\"\r\nimport { ThunkAction } from 'redux-thunk';\r\n\r\nconst GET_CURRENT_VALUES = \"GET_CURRENT_VALUE\"\r\nconst SELECT_CURRENT_VALUTES = \"SELECT_CURRENT_VALUTES\"\r\nconst SELECT_VISE_VALUTES = \"SELECT_VISE_VALUTES\"\r\nconst INPUT_VALUTE = \"INPUT_VALUTE\"\r\nlet initialState = {\r\n    currentValutes: null as getValutesAPIType[] | null,\r\n    isSelectValuteActive: null as getValutesAPIType | null,\r\n    isSelectValutePasive: null as getValutesAPIType | null,\r\n    inputValue: '',\r\n    // resultValute:  \r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = GetCurrentValutesType | SelectCurrentValutesType | SelectViseValutesType | InputValuteType\r\n\r\nexport const ValutesReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case GET_CURRENT_VALUES:\r\n            return {\r\n                ...state,\r\n                currentValutes: action.currentValutes\r\n            }\r\n        case SELECT_CURRENT_VALUTES:\r\n            return {\r\n                ...state,\r\n                isSelectValuteActive: action.item\r\n            }\r\n        case SELECT_VISE_VALUTES:\r\n            return {\r\n                ...state,\r\n                isSelectValutePasive: action.item\r\n            }\r\n        case INPUT_VALUTE: \r\n            return {\r\n                ...state,\r\n                inputValue: action.inputText\r\n            }\r\n        default: return state\r\n    }\r\n}\r\n\r\n/* ===ActionsCreate=== */\r\n\r\n\r\ntype GetCurrentValutesType = {\r\n    type: typeof GET_CURRENT_VALUES,\r\n    currentValutes: getValutesAPIType[]\r\n}\r\n\r\nconst getCurrentValutes = (currentValutes: getValutesAPIType[]): GetCurrentValutesType => ({\r\n    type: GET_CURRENT_VALUES,\r\n    currentValutes\r\n})\r\n\r\ntype SelectCurrentValutesType = {\r\n    type: typeof SELECT_CURRENT_VALUTES,\r\n    item: getValutesAPIType | null\r\n}\r\n\r\nexport const selectCurrentValutes = (item: getValutesAPIType | null): SelectCurrentValutesType => ({\r\n    type: SELECT_CURRENT_VALUTES,\r\n    item\r\n})\r\n\r\ntype SelectViseValutesType = {\r\n    type: typeof SELECT_VISE_VALUTES,\r\n    item: getValutesAPIType | null\r\n}\r\n\r\nexport const selectViseValutes = (item: getValutesAPIType | null): SelectViseValutesType => ({\r\n    type: SELECT_VISE_VALUTES,\r\n    item\r\n})\r\n\r\ntype InputValuteType = {\r\n    type: typeof INPUT_VALUTE,\r\n    inputText: string\r\n}\r\n\r\nexport const inputValute = (inputText: string): InputValuteType => ({\r\n    type: INPUT_VALUTE,\r\n    inputText\r\n})\r\n\r\n/* ===Thunks=== */\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\n\r\nexport const getValutes = (): ThunkType => {\r\n    return async (dispatch: any) => {\r\n        let data = await ValutesAPI.getValutes()\r\n        dispatch(getCurrentValutes(data))\r\n    }\r\n}\r\n\r\n\r\n//@ts-ignore\r\nwindow._state_ = getValutes","import React from 'react'\r\nimport './preloader.sass'\r\n\r\nexport const Preloader = () => {\r\n\r\n    return (\r\n        <div className=\"loader-layout\">\r\n            <div className=\"lds-spinner\">\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useCallback, Suspense } from 'react';\nimport './App.sass';\nimport { useDispatch } from 'react-redux';\nimport { getValutes } from './stateManager/valutes-reducer';\nimport { Switch, Route } from 'react-router';\nimport { Preloader } from './component/common/Preloader/preloader';\n\nconst CurrentCurses = React.lazy(() => import(\"./component/CurrentCurses/currentCurses\"))\nconst ConvertorPage = React.lazy(() => import(\"./component/ConventorPage/conventerPage\"))\n\n\nexport const App: React.FC = () => {\n\n  /* ===UseDispatcj=== */\n  const dispatch = useDispatch()\n\n  const getCurrentValutes = useCallback(() => {\n    dispatch(getValutes())\n  }, [dispatch])\n\n  useEffect(() => {\n    getCurrentValutes()\n  }, [])\n\n  return (\n    <Suspense fallback={<Preloader />}>\n      <div className=\"container\">\n        <Switch>\n          <Route path=\"/\" exact render={() => <ConvertorPage />} />\n          <Route path=\"/currentCurses\" render={() => <CurrentCurses />} />\n        </Switch>\n      </div>\n    </Suspense >\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ValutesReducer } from './valutes-reducer';\r\nimport { combineReducers, createStore, applyMiddleware } from 'redux'\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nlet rootReducer = combineReducers({\r\n    valutesReducer: ValutesReducer\r\n})\r\n\r\n\r\ntype RootReducerType = typeof rootReducer\r\n\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createContext } from 'vm';\nimport { store } from './stateManager/redux-store';\nimport { Provider } from 'react-redux'\nimport {BrowserRouter, HashRouter} from 'react-router-dom'\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}