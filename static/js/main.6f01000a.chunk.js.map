{"version":3,"sources":["component/CurrentCurses/ValuteItem/valuteItem.tsx","component/CurrentCurses/currentCurses.tsx","api/api.ts","stateManager/valutes-reducer.ts","component/ConventorPage/conventerPage.tsx","App.tsx","serviceWorker.ts","stateManager/redux-store.ts","index.tsx"],"names":["ValuteItem","buy","sale","key","ccy","className","CurrentCurses","valuteList","useSelector","state","valutesReducer","currentValutes","map","item","to","ValutesAPI","fetch","then","response","json","initialState","isSelectValuteActive","isSelectValutePasive","inputValue","getValutes","dispatch","a","data","console","log","type","currentValues","window","_state_","ConvertorPage","useState","classesActive","setClassesActive","classesPasive","setClassesPasive","inputValueResultActive","setInputValueResultActive","inputValueResultPasive","setInputValueResultPasive","useDispatch","selectValutesActiveCB","useCallback","selectCurrentValutes","onSelectValutesActive","selectValutesPasiveCB","index","indexOf","splice","signOfValutesActive","onClick","selectViseValutes","onSelectValutesPasive","signOfValutesPasive","useEffect","String","Number","toFixed","name","min","value","onChange","e","currentTarget","includes","join","App","getCurrentValutes","path","exact","render","Boolean","location","hostname","match","rootReducer","combineReducers","action","inputText","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6f01000a.chunk.js","sourcesContent":["import React from 'react'\r\nimport './valuteItem.sass'\r\n\r\ntype PropsType = {\r\n    key: string\r\n    buy: string;\r\n    ccy: string;\r\n    sale: string;\r\n}\r\nexport const ValuteItem: React.FC<PropsType> = ({ buy, sale, key, ccy }) => {\r\n    return (\r\n        <div className=\"valute-item\" key={key}>\r\n            <span>{ccy}</span>\r\n            <div className=\"item-title_buy\">Buy: {buy}</div>\r\n            <div className=\"item-title_sale\">Sale: {sale}</div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { ValuteItem } from './ValuteItem/valuteItem'\r\nimport { NavLink } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../stateManager/redux-store';\r\nimport './../common/button.sass'\r\n\r\nexport const CurrentCurses: React.FC = () => {\r\n\r\n    /* ===UseSelector=== */\r\n    const currentValutes = useSelector((state: AppStateType) => state.valutesReducer.currentValutes)\r\n\r\n    let valuteList = currentValutes!.map(item => {\r\n        return <ValuteItem key={item.ccy} buy={item.buy} sale={item.sale} ccy={item.ccy} />\r\n    })\r\n\r\n    return (\r\n        <div className=\"currentCursesPage\">\r\n            <NavLink to=\"/\" className=\"btn\">Conventor Valutes</NavLink>\r\n            <div className=\"valuteList\">\r\n                {valuteList}\r\n            </div>\r\n        </div>\r\n    )\r\n}","\r\nexport type getValutesAPIType = {\r\n    base_ccy?: string\r\n    buy: string\r\n    ccy: string\r\n    sale: string\r\n}\r\n\r\ntype ValutesType = Array<getValutesAPIType>\r\nexport const ValutesAPI = {\r\n    getValutes: ():Promise<ValutesType> => {\r\n        return fetch('https://api.privatbank.ua/p24api/pubinfo?json&exchange&coursid=5').then(response => response.json())\r\n    }\r\n}\r\n","import { getValutesAPIType } from './../api/api';\r\nimport { AppStateType } from './redux-store';\r\nimport { ValutesAPI } from \"../api/api\"\r\nimport { ThunkAction } from 'redux-thunk';\r\n\r\nconst GET_CURRENT_VALUES = \"GET_CURRENT_VALUE\"\r\nconst SELECT_CURRENT_VALUTES = \"SELECT_CURRENT_VALUTES\"\r\nconst SELECT_VISE_VALUTES = \"SELECT_VISE_VALUTES\"\r\nconst INPUT_VALUTE = \"INPUT_VALUTE\"\r\nlet initialState = {\r\n    currentValutes: null as getValutesAPIType[] | null,\r\n    isSelectValuteActive: null as getValutesAPIType | null,\r\n    isSelectValutePasive: null as getValutesAPIType | null,\r\n    inputValue: '',\r\n    // resultValute:  \r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = GetCurrentValutesType | SelectCurrentValutesType | SelectViseValutesType | InputValuteType\r\n\r\nexport const ValutesReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case GET_CURRENT_VALUES:\r\n            return {\r\n                ...state,\r\n                currentValutes: action.currentValues\r\n            }\r\n        case SELECT_CURRENT_VALUTES:\r\n            return {\r\n                ...state,\r\n                isSelectValuteActive: action.item\r\n            }\r\n        case SELECT_VISE_VALUTES:\r\n            return {\r\n                ...state,\r\n                isSelectValutePasive: action.item\r\n            }\r\n        case INPUT_VALUTE: \r\n            return {\r\n                ...state,\r\n                inputValue: action.inputText\r\n            }\r\n        default: return state\r\n    }\r\n}\r\n\r\n/* ===ActionsCreate=== */\r\n\r\n\r\ntype GetCurrentValutesType = {\r\n    type: typeof GET_CURRENT_VALUES,\r\n    currentValues: getValutesAPIType[]\r\n}\r\n\r\nconst getCurrentValutes = (currentValues: getValutesAPIType[]): GetCurrentValutesType => ({\r\n    type: GET_CURRENT_VALUES,\r\n    currentValues\r\n})\r\n\r\ntype SelectCurrentValutesType = {\r\n    type: typeof SELECT_CURRENT_VALUTES,\r\n    item: getValutesAPIType | null\r\n}\r\n\r\nexport const selectCurrentValutes = (item: getValutesAPIType | null): SelectCurrentValutesType => ({\r\n    type: SELECT_CURRENT_VALUTES,\r\n    item\r\n})\r\n\r\ntype SelectViseValutesType = {\r\n    type: typeof SELECT_VISE_VALUTES,\r\n    item: getValutesAPIType | null\r\n}\r\n\r\nexport const selectViseValutes = (item: getValutesAPIType | null): SelectViseValutesType => ({\r\n    type: SELECT_VISE_VALUTES,\r\n    item\r\n})\r\n\r\ntype InputValuteType = {\r\n    type: typeof INPUT_VALUTE,\r\n    inputText: string\r\n}\r\n\r\nexport const inputValute = (inputText: string): InputValuteType => ({\r\n    type: INPUT_VALUTE,\r\n    inputText\r\n})\r\n\r\n/* ===Thunks=== */\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\n\r\nexport const getValutes = (): ThunkType => {\r\n    return async (dispatch: any) => {\r\n        let data = await ValutesAPI.getValutes()\r\n        console.log(data)\r\n        dispatch(getCurrentValutes(data))\r\n    }\r\n}\r\n\r\n\r\n//@ts-ignore\r\nwindow._state_ = getValutes","import React, { useCallback, useState, useEffect } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport './conventerPage.sass'\r\nimport { AppStateType } from '../../stateManager/redux-store'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { selectCurrentValutes, selectViseValutes } from '../../stateManager/valutes-reducer'\r\nimport { getValutesAPIType } from '../../api/api'\r\nexport const ConvertorPage = () => {\r\n\r\n    /* ===UseState=== */\r\n    let [classesActive, setClassesActive] = useState<string[]>(['valute-list_wrapper'])\r\n    let [classesPasive, setClassesPasive] = useState<string[]>(['valute-list_wrapper'])\r\n    let [inputValueResultActive, setInputValueResultActive] = useState<string>('0')\r\n    let [inputValueResultPasive, setInputValueResultPasive] = useState('0')\r\n    /* ===UseSelector=== */\r\n    const currentValutes = useSelector((state: AppStateType) => state.valutesReducer.currentValutes)\r\n    let isSelectValuteActive = useSelector((state: AppStateType) => state.valutesReducer.isSelectValuteActive)\r\n    let isSelectValutePasive = useSelector((state: AppStateType) => state.valutesReducer.isSelectValutePasive)\r\n    // const inputValue = useSelector((state: AppStateType) => state.valutesReducer.inputValue)\r\n    /* ===UseDispatch=== */\r\n    const dispatch = useDispatch()\r\n\r\n    /* ===For Active Valutes=== */\r\n    const selectValutesActiveCB = useCallback((item: getValutesAPIType | null) => {\r\n        dispatch(selectCurrentValutes(item))\r\n    }, [dispatch])\r\n\r\n    const onSelectValutesActive = (item: getValutesAPIType | null) => {\r\n        return () => {\r\n            selectValutesPasiveCB(item?.ccy === isSelectValutePasive?.ccy ? isSelectValuteActive : isSelectValutePasive)\r\n            selectValutesActiveCB(item?.ccy === isSelectValutePasive?.ccy ? isSelectValutePasive : item)\r\n            setClassesActive(() => {\r\n                let index = classesActive.indexOf('open')\r\n                return index > -1 ? classesActive.splice(index - 1, 1) : classesActive\r\n            })\r\n        }\r\n    }\r\n\r\n    const toggleMenuActive = () => {\r\n        classesPasive.includes('open') && classesPasive.splice(1, 1)\r\n        setClassesActive(() => {\r\n            let index = classesActive.indexOf('open')\r\n            return index > -1 ? classesActive.splice(index - 1, 1) : [...classesActive, 'open']\r\n        })\r\n    }\r\n\r\n    let signOfValutesActive = currentValutes?.map(item => {\r\n        return <li className=\"list-item\" onClick={onSelectValutesActive(item)} key={item.ccy}>{item.ccy}</li>\r\n    })\r\n\r\n\r\n    const inputValueChangeActive = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setInputValueResultActive(e.currentTarget.value)\r\n        setInputValueResultPasive(String((Number(isSelectValuteActive?.sale) / Number(isSelectValutePasive?.sale) * Number(e.currentTarget.value)).toFixed(2)))\r\n    }\r\n\r\n    /* ===For Pasive Valutes=== */\r\n    const selectValutesPasiveCB = useCallback((item: getValutesAPIType | null) => {\r\n        dispatch(selectViseValutes(item))\r\n    }, [dispatch])\r\n\r\n    const onSelectValutesPasive = (item: getValutesAPIType | null) => {\r\n\r\n        return () => {\r\n            selectValutesPasiveCB(item?.ccy === isSelectValuteActive?.ccy ? isSelectValuteActive : item)\r\n            selectValutesActiveCB(item?.ccy === isSelectValuteActive?.ccy ? isSelectValutePasive : isSelectValuteActive)\r\n            setClassesPasive(() => {\r\n                let index = classesPasive.indexOf('open')\r\n                return index > -1 ? classesPasive.splice(index - 1, 1) : classesPasive\r\n            })\r\n        }\r\n    }\r\n\r\n    const toggleMenuPasive = () => {\r\n        classesActive.includes('open') && classesActive.splice(1, 1)\r\n        setClassesPasive(() => {\r\n            let index = classesPasive.indexOf('open')\r\n            return index > -1 ? classesPasive.splice(index - 1, 1) : [...classesPasive, 'open']\r\n        })\r\n    }\r\n\r\n    let signOfValutesPasive = currentValutes?.map(item => {\r\n        return <li className=\"list-item\" onClick={onSelectValutesPasive(item)} key={item.ccy}>{item.ccy}</li>\r\n    })\r\n\r\n    const inputValueChangePasive = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setInputValueResultPasive(e.currentTarget.value)\r\n        setInputValueResultActive(String((Number(isSelectValutePasive?.sale) / Number(isSelectValuteActive?.sale) * Number(e.currentTarget.value)).toFixed(2)))\r\n    }\r\n\r\n    if (currentValutes) {\r\n        if (!isSelectValuteActive) isSelectValuteActive = currentValutes[0]\r\n        if (!isSelectValutePasive) isSelectValutePasive = currentValutes[1]\r\n    }\r\n\r\n    useEffect(() => {\r\n        setInputValueResultPasive(String((Number(isSelectValuteActive?.sale) / Number(isSelectValutePasive?.sale) * Number(inputValueResultActive)).toFixed(2)))\r\n    }, [isSelectValutePasive?.ccy, isSelectValuteActive?.ccy])\r\n\r\n\r\n\r\n    if (!currentValutes) return <div>Loading...</div>\r\n\r\n    return (\r\n\r\n        <div className=\"conventerValutesPage\">\r\n            <NavLink to=\"/currentCurses\" className=\"btn\">Current Curses</NavLink>\r\n            <div className=\"conventer-form\">\r\n                <div className=\"currentValue-valute\"></div>\r\n                <div className=\"conventer-form_wrapper\">\r\n                    <div className=\"form-col form-col_active\">\r\n                        <div className=\"active-valute_number\">\r\n                            <input type=\"number\" name=\"\" min=\"0\" value={inputValueResultActive} onChange={inputValueChangeActive} />\r\n                        </div>\r\n                        <div className=\"active-valute_sign\">\r\n                            <ul className=\"valute-list\">\r\n                                <span onClick={toggleMenuActive}>{isSelectValuteActive?.ccy}</span>\r\n                                <div className={classesActive.join(' ')}>{signOfValutesActive}</div>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-col form-col_pasive\">\r\n                        <div className=\"pasive-valute_number\">\r\n                            <input type=\"number\" name=\"\" min=\"0\" value={inputValueResultPasive} onChange={inputValueChangePasive} />\r\n                        </div>\r\n                        <div className=\"pasive-valute_sign\">\r\n                            <ul className=\"valute-list\">\r\n                                <span onClick={toggleMenuPasive}>{isSelectValutePasive?.ccy}</span>\r\n                                <div className={classesPasive.join(' ')}>{signOfValutesPasive}</div>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useCallback } from 'react';\nimport './App.sass';\nimport { CurrentCurses } from './component/CurrentCurses/currentCurses';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { AppStateType } from './stateManager/redux-store';\nimport { getValutes } from './stateManager/valutes-reducer';\nimport { Switch, Route } from 'react-router';\nimport { ConvertorPage } from './component/ConventorPage/conventerPage';\n\nexport const App = () => {\n\n  /* ===UseSelector=== */\n  const currentValutes = useSelector((state: AppStateType) => state.valutesReducer.currentValutes)\n\n  /* ===UseDispatcj=== */\n  const dispatch = useDispatch()\n\n  const getCurrentValutes = useCallback(() => {\n    dispatch(getValutes())\n  }, [dispatch])\n\n  useEffect(() => {\n    getCurrentValutes()\n  }, [])\n\n  return (\n    <div className=\"container\">\n      <Switch>\n        <Route path=\"/\" exact render={() => <ConvertorPage />}/>\n        <Route path=\"/currentCurses\" render={() => <CurrentCurses />}/>\n      </Switch>\n    </div>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ValutesReducer } from './valutes-reducer';\r\nimport { combineReducers, createStore, applyMiddleware } from 'redux'\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nlet rootReducer = combineReducers({\r\n    valutesReducer: ValutesReducer\r\n})\r\n\r\n\r\ntype RootReducerType = typeof rootReducer\r\n\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createContext } from 'vm';\nimport { store } from './stateManager/redux-store';\nimport { Provider } from 'react-redux'\nimport {BrowserRouter, HashRouter} from 'react-router-dom'\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}